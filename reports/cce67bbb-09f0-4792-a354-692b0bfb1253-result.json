{"name": "test_active_all", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=107.0.5304.110)\nStacktrace:\n#0 0x561a073b8463 <unknown>\n#1 0x561a0717c8d8 <unknown>\n#2 0x561a07158a50 <unknown>\n#3 0x561a071df84d <unknown>\n#4 0x561a071f38d9 <unknown>\n#5 0x561a071db443 <unknown>\n#6 0x561a071ac3c5 <unknown>\n#7 0x561a071ad531 <unknown>\n#8 0x561a0740adce <unknown>\n#9 0x561a0740e192 <unknown>\n#10 0x561a073ef93e <unknown>\n#11 0x561a0740f103 <unknown>\n#12 0x561a073e2d85 <unknown>\n#13 0x561a074300a8 <unknown>\n#14 0x561a07430239 <unknown>\n#15 0x561a0744b492 <unknown>\n#16 0x7fbc9ebabb43 <unknown>", "trace": "self = <selene.core.wait.Wait object at 0x7f37be693bb0>\nfn = <selene.core.conditions.BrowserCondition object at 0x7f37be693820>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.conditions.BrowserCondition object at 0x7f37be693820>\nentity = <selene.support.shared.browser.SharedBrowser object at 0x7f37bf1ea790>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/condition.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.support.shared.browser.SharedBrowser object at 0x7f37bf1ea790>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__\n            if query_to_str.startswith('<function')\n            else query_to_str\n        )\n>       actual = query(entity)\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/condition.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <selene.support.shared.browser.SharedBrowser object at 0x7f37bf1ea790>\n\n    def script_result(browser: Browser):\n>       return browser.driver.execute_script(script, *args)\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/match.py:470: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f08c3d71715fe7494a4332f49625cd2\")>\nscript = 'return ($._data($(\"#clear-completed\").get(0), \"events\").hasOwnProperty(\"click\") && (Object.keys(require.s.contexts._.defined).length === 39))'\nargs = (), converted_args = [], command = 'w3cExecuteScript'\n\n    def execute_script(self, script, *args):\n        \"\"\"\n        Synchronously Executes JavaScript in the current window/frame.\n    \n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n    \n        :Usage:\n            ::\n    \n                driver.execute_script('return document.title;')\n        \"\"\"\n        if isinstance(script, ScriptKey):\n            try:\n                script = self.pinned_scripts[script.id]\n            except KeyError:\n                raise JavascriptException(\"Pinned script could not be found\")\n    \n        converted_args = list(args)\n        command = Command.W3C_EXECUTE_SCRIPT\n    \n>       return self.execute(command, {\n            'script': script,\n            'args': converted_args})['value']\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7f08c3d71715fe7494a4332f49625cd2\")>\ndriver_command = 'w3cExecuteScript'\nparams = {'args': [], 'script': 'return ($._data($(\"#clear-completed\").get(0), \"events\").hasOwnProperty(\"click\") && (Object.keys(require.s.contexts._.defined).length === 39))'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f37be660e20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x561a07430239 \\\\u003Cunknown>\\\\n#15 0x561a0744b492 \\\\u003Cunknown>\\\\n#16 0x7fbc9ebabb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=107.0.5304.110)\nE       Stacktrace:\nE       #0 0x561a073b8463 <unknown>\nE       #1 0x561a0717c8d8 <unknown>\nE       #2 0x561a07158a50 <unknown>\nE       #3 0x561a071df84d <unknown>\nE       #4 0x561a071f38d9 <unknown>\nE       #5 0x561a071db443 <unknown>\nE       #6 0x561a071ac3c5 <unknown>\nE       #7 0x561a071ad531 <unknown>\nE       #8 0x561a0740adce <unknown>\nE       #9 0x561a0740e192 <unknown>\nE       #10 0x561a073ef93e <unknown>\nE       #11 0x561a0740f103 <unknown>\nE       #12 0x561a073e2d85 <unknown>\nE       #13 0x561a074300a8 <unknown>\nE       #14 0x561a07430239 <unknown>\nE       #15 0x561a0744b492 <unknown>\nE       #16 0x7fbc9ebabb43 <unknown>\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_active_all():\n>       todos.given_opened('a', 'b', 'c')\n\ntodomvc_test/tests/test_operations_at_all_filters.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntodomvc_test/model/pages/todomwc.py:20: in given_opened\n    self.visit()\ntodomvc_test/model/pages/todomwc.py:11: in visit\n    self.browser.open('http://todomvc4tasj.herokuapp.com/') \\\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/entity.py:1634: in should\n    super().should(condition)\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/entity.py:126: in should\n    self.wait.for_(condition)\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/core/wait.py:125: in for_\n    raise self._hook_failure(failure)\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/common/fp.py:41: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/support/shared/config.py:341: in save_and_log_screenshot\n    path = WebHelper(self.driver).save_screenshot(\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selene/support/webdriver.py:68: in save_screenshot\n    return file if self._driver.get_screenshot_as_file(file) else None\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1322: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1358: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode('ascii'))\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:1370: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f37be660e20>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x561a07430239 \\\\u003Cunknown>\\\\n#15 0x561a0744b492 \\\\u003Cunknown>\\\\n#16 0x7fbc9ebabb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=107.0.5304.110)\nE       Stacktrace:\nE       #0 0x561a073b8463 <unknown>\nE       #1 0x561a0717c8d8 <unknown>\nE       #2 0x561a07158a50 <unknown>\nE       #3 0x561a071df84d <unknown>\nE       #4 0x561a071f38d9 <unknown>\nE       #5 0x561a071db443 <unknown>\nE       #6 0x561a071ac3c5 <unknown>\nE       #7 0x561a071ad531 <unknown>\nE       #8 0x561a0740adce <unknown>\nE       #9 0x561a0740e192 <unknown>\nE       #10 0x561a073ef93e <unknown>\nE       #11 0x561a0740f103 <unknown>\nE       #12 0x561a073e2d85 <unknown>\nE       #13 0x561a074300a8 <unknown>\nE       #14 0x561a07430239 <unknown>\nE       #15 0x561a0744b492 <unknown>\nE       #16 0x7fbc9ebabb43 <unknown>\n\n../../.cache/pypoetry/virtualenvs/codarium-course-J6QylXrB-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "851ebc0f-90c4-4034-b9ba-a7f60f069d20-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e87cbc49-a802-444b-9898-a2904575defa-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "19a33cf2-f6ed-4adb-93ec-ce97e3aa754a-attachment.txt", "type": "text/plain"}], "start": 1668590198340, "stop": 1668590204502, "uuid": "58c90a6f-61c8-4f8c-a447-94016f6dfba4", "historyId": "018ccbde9e581b553c819df86d684fe1", "testCaseId": "4606f9ac69c04d000e5c9073d32bd96f", "fullName": "todomvc_test.tests.test_operations_at_all_filters#test_active_all", "labels": [{"name": "parentSuite", "value": "todomvc_test.tests"}, {"name": "suite", "value": "test_operations_at_all_filters"}, {"name": "host", "value": "vlad-X550LD"}, {"name": "thread", "value": "22058-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "todomvc_test.tests.test_operations_at_all_filters"}]}